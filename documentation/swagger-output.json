{
  "openapi": "3.0.0",
  "info": {
    "title": "Library Management API",
    "version": "1.0.0",
    "description": "API documentation for Library Management System"
  },
  "servers": [
    {
      "url": "http://localhost:3000/"
    }
  ],
  "paths": {
    "/api/authors": {
      "post": {
        "tags": [
          "Authors"
        ],
        "summary": "Create a new author",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nom": {
                    "type": "string",
                    "example": "Dupont"
                  },
                  "prenom": {
                    "type": "string",
                    "example": "Jean"
                  },
                  "livres": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "ID of the book(s) written by the author"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Author created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Author"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "get": {
        "tags": [
          "Authors"
        ],
        "summary": "Get all authors",
        "responses": {
          "200": {
            "description": "A list of authors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Author"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/authors/{id}": {
      "get": {
        "tags": [
          "Authors"
        ],
        "summary": "Get an author by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the author",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Author details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Author"
                }
              }
            }
          },
          "404": {
            "description": "Author not found"
          }
        }
      },
      "put": {
        "tags": [
          "Authors"
        ],
        "summary": "Update an author by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the author",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nom": {
                    "type": "string",
                    "example": "Dupont"
                  },
                  "prenom": {
                    "type": "string",
                    "example": "Jean"
                  },
                  "livres": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "ID of the book(s) written by the author"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Author updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Author not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Authors"
        ],
        "summary": "Delete an author by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the author",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Author deleted successfully"
          },
          "404": {
            "description": "Author not found"
          }
        }
      }
    },
    "/api/books": {
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Create a new book",
        "description": "Creates a new book and saves it to the database.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "titre": {
                    "type": "string"
                  },
                  "auteurPrincipal": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "auteursSecondaires": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "categorie": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "disponible": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "titre": {
                      "type": "string"
                    },
                    "auteurPrincipal": {
                      "type": "string"
                    },
                    "auteursSecondaires": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "categorie": {
                      "type": "string"
                    },
                    "disponible": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get all books",
        "description": "Returns a list of all books in the database.",
        "responses": {
          "200": {
            "description": "A list of books",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "titre": {
                        "type": "string"
                      },
                      "auteurPrincipal": {
                        "type": "string"
                      },
                      "auteursSecondaires": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "categorie": {
                        "type": "string"
                      },
                      "disponible": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/books/{id}": {
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Get a book by ID",
        "description": "Returns a single book by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the book",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "titre": {
                      "type": "string"
                    },
                    "auteurPrincipal": {
                      "type": "string"
                    },
                    "auteursSecondaires": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "categorie": {
                      "type": "string"
                    },
                    "disponible": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Books"
        ],
        "summary": "Update a book",
        "description": "Updates a book by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the book",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "titre": {
                    "type": "string"
                  },
                  "auteurPrincipal": {
                    "type": "string"
                  },
                  "auteursSecondaires": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "categorie": {
                    "type": "string"
                  },
                  "disponible": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "titre": {
                      "type": "string"
                    },
                    "auteurPrincipal": {
                      "type": "string"
                    },
                    "auteursSecondaires": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "categorie": {
                      "type": "string"
                    },
                    "disponible": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Books"
        ],
        "summary": "Delete a book",
        "description": "Deletes a book by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the book",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Book deleted successfully"
          },
          "404": {
            "description": "Book not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/books/{id}/borrow": {
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Borrow a book",
        "description": "Marks a book as borrowed.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the book",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book borrowed successfully"
          },
          "400": {
            "description": "Book not available"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/books/{id}/return": {
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Return a book",
        "description": "Marks a book as returned.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the book",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book returned successfully"
          },
          "400": {
            "description": "Book already returned"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/categories": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new category",
        "description": "Creates a new category and saves it to the database.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nom": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nom": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "description": "Returns a list of all categories in the database.",
        "responses": {
          "200": {
            "description": "A list of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "nom": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get a category by ID",
        "description": "Returns a single category by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nom": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Update a category",
        "description": "Updates a category by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nom": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nom": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete a category",
        "description": "Deletes a category by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category deleted successfully"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a new user",
        "description": "Creates a new user account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nom": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "motDePasse": {
                    "type": "string",
                    "format": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Bad request, user already exists or fields are missing"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login a user",
        "description": "Authenticates a user and returns a JWT token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "motDePasse": {
                    "type": "string",
                    "format": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect password"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Returns a list of all users.",
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "nom": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string",
                        "format": "email"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user by ID",
        "description": "Returns a user by their ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nom": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "Updates user information.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nom": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "motDePasse": {
                    "type": "string",
                    "format": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nom": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Deletes a user by their ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Author": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The auto-generated id of the author"
          },
          "nom": {
            "type": "string",
            "description": "The last name of the author"
          },
          "prenom": {
            "type": "string",
            "description": "The first name of the author"
          },
          "livres": {
            "type": "array",
            "description": "The books written by the author",
            "items": {
              "type": "string",
              "description": "ID of the book(s)"
            }
          }
        }
      },
      "Book": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the book"
          },
          "titre": {
            "type": "string",
            "description": "The title of the book"
          },
          "auteurPrincipal": {
            "type": "string",
            "description": "The ID of the main author of the book"
          },
          "auteursSecondaires": {
            "type": "array",
            "description": "The IDs of secondary authors of the book",
            "items": {
              "type": "string"
            }
          },
          "categorie": {
            "type": "string",
            "description": "The ID of the category of the book"
          },
          "disponible": {
            "type": "boolean",
            "description": "The availability status of the book",
            "default": true
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the category"
          },
          "nom": {
            "type": "string",
            "description": "The name of the category"
          },
          "description": {
            "type": "string",
            "description": "A description of the category"
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated id of the user"
          },
          "nom": {
            "type": "string",
            "description": "The last name of the user"
          },
          "email": {
            "type": "string",
            "description": "The email address of the user"
          },
          "motDePasse": {
            "type": "string",
            "description": "The hashed password of the user"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authors",
      "description": "API for managing authors"
    },
    {
      "name": "Books",
      "description": "API for managing books"
    },
    {
      "name": "Categories",
      "description": "API for managing categories"
    },
    {
      "name": "Users",
      "description": "API for managing users"
    }
  ]
}